Clientes 


• Atributos: ID_CLIENTE, Nombre, Apellido, Email, Teléfono, Dirección. 

Productos 

• Atributos: ID_PRODUCTO, Nombre_PRODUCTO, Descripción, Precio, Stock. 


Pedidos 


• Atributos: ID_PEDIDO, Cliente, Lista de Productos, Total, Fecha de Creación, Estado 





Clientes 

• Atributos: ID_CLIENTE, Nombre, Apellido, Email, Teléfono, Dirección. 

• Criterios de aceptación: Validar que nombre y apellido no sean nulos, que el teléfono y el email 
sean obligatorios y tengan restricción única, además de validar que el número sea de solo 10 
digitos (0-9) y el correo cumpla con el patrón de un email (ejemplo@dominio.com), la dirección 
puede ser opcional pero no debe ser mayor de 100 caracteres. 

Productos 

• Permite la gestión de productos (crear, actualizar, eliminar, listar). 
• Atributos: ID, Nombre, Descripción, Precio, Stock. 
• Criterios de aceptación: Validar que nombre y descripción no sean nulos, que el precio y el stock 
no puedan ser negativos. 

Pedidos 

• Permite la gestión de pedidos (crear, actualizar, eliminar, listar). 
• Atributos: ID, Cliente, Lista de Productos, Total, Fecha de Creación, Estado (Pendiente, 
Enviado, Entregado, Cancelado). 
• Criterios de aceptación: Validar que el total se calcule de manera automática (desde back o front 
pero que se refleje en el registro), que la fecha de creación sea anterior a la fecha actual.

//////////////////                //////////    CREAR SECUENCIAS    /////////////////                  //////////////

CREATE SEQUENCE CLIENTES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE PRODUCTOS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE PEDIDOS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

////////////////           ////////////      CREAR TABLAS             ////////////            ///////////////////


-- TABLA CLIENTES
CREATE TABLE CLIENTES (
    ID_CLIENTE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE       VARCHAR2(50),
    APELLIDO     VARCHAR2(50),
    EMAIL        VARCHAR2(100),
    TELEFONO     VARCHAR2(20),
    DIRECCION    VARCHAR2(150)
);

-- TABLA PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR2(100),
    DESCRIPCION     VARCHAR2(255),
    PRECIO          NUMBER(10,2),
    STOCK           NUMBER
);

CREATE TABLE ESTADO (
    ID_ESTADO    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DESCRIPCION  VARCHAR2(20) NOT NULL
);


DROP TABLE PEDIDOS;

CREATE TABLE PEDIDOS (
    ID_PEDIDO        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_CLIENTE       NUMBER NOT NULL,
    LISTA_PRODUCTOS  CLOB,            -- IDs de productos separados por coma
    TOTAL            NUMBER(10,2),
    FECHA_CREACION   DATE DEFAULT SYSDATE,
    ID_ESTADO        NUMBER NOT NULL,

    CONSTRAINT FK_CLIENTE_PEDIDO FOREIGN KEY (ID_CLIENTE)
        REFERENCES CLIENTES(ID_CLIENTE),
    CONSTRAINT FK_PEDIDO_ESTADO FOREIGN KEY (ID_ESTADO)
        REFERENCES ESTADO(ID_ESTADO)
);

////////////////////////////////////////////////  CREACION D E PROCESOS  ////////////////////////////////////////////////////////////////////////////////


------------------------------------------------------------------------
-- 1) CREAR_O_ACTUALIZAR_CLIENTE
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CREAR_O_ACTUALIZAR_CLIENTE (
    P_ID_CLIENTE   IN CLIENTES.ID_CLIENTE%TYPE,
    P_NOMBRE       IN CLIENTES.NOMBRE%TYPE,
    P_APELLIDO     IN CLIENTES.APELLIDO%TYPE,
    P_EMAIL        IN CLIENTES.EMAIL%TYPE,
    P_TELEFONO     IN CLIENTES.TELEFONO%TYPE,
    P_DIRECCION    IN CLIENTES.DIRECCION%TYPE
)
IS
    V_EXISTENTE    NUMBER;
BEGIN
    -- VALIDACIONES BÁSICAS
    IF P_NOMBRE IS NULL OR P_APELLIDO IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'NOMBRE Y APELLIDO SON OBLIGATORIOS.');
    ELSIF P_EMAIL IS NULL OR P_TELEFONO IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'EMAIL Y TELEFONO SON OBLIGATORIOS.');
    ELSIF NOT REGEXP_LIKE(P_TELEFONO, '^[0-9]{10}$') THEN
        RAISE_APPLICATION_ERROR(-20003, 'TELEFONO DEBE TENER 10 DIGITOS (0-9).');
    ELSIF NOT REGEXP_LIKE(P_EMAIL, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        RAISE_APPLICATION_ERROR(-20004, 'EMAIL NO CUMPLE PATRON valido.');
    ELSIF P_DIRECCION IS NOT NULL AND LENGTH(P_DIRECCION) > 100 THEN
        RAISE_APPLICATION_ERROR(-20005, 'DIRECCION NO PUEDE EXCEDER 100 CARACTERES.');
    END IF;

    -- UNICIDAD DE EMAIL
    SELECT COUNT(*) INTO V_EXISTENTE
      FROM CLIENTES
     WHERE EMAIL = P_EMAIL
       AND (P_ID_CLIENTE IS NULL OR ID_CLIENTE <> P_ID_CLIENTE);
    IF V_EXISTENTE > 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'EMAIL YA EXISTE.');
    END IF;

    -- UNICIDAD DE TELEFONO
    SELECT COUNT(*) INTO V_EXISTENTE
      FROM CLIENTES
     WHERE TELEFONO = P_TELEFONO
       AND (P_ID_CLIENTE IS NULL OR ID_CLIENTE <> P_ID_CLIENTE);
    IF V_EXISTENTE > 0 THEN
        RAISE_APPLICATION_ERROR(-20007, 'TELEFONO YA EXISTE.');
    END IF;

    IF P_ID_CLIENTE IS NULL THEN
        -- INSERTAR
        INSERT INTO CLIENTES (NOMBRE, APELLIDO, EMAIL, TELEFONO, DIRECCION)
        VALUES (P_NOMBRE, P_APELLIDO, P_EMAIL, P_TELEFONO, P_DIRECCION);
    ELSE
        -- ACTUALIZAR
        SELECT COUNT(*) INTO V_EXISTENTE
          FROM CLIENTES
         WHERE ID_CLIENTE = P_ID_CLIENTE;
        IF V_EXISTENTE = 0 THEN
            RAISE_APPLICATION_ERROR(-20008, 'CLIENTE CON ESE ID NO EXISTE.');
        END IF;

        UPDATE CLIENTES
           SET NOMBRE    = P_NOMBRE,
               APELLIDO  = P_APELLIDO,
               EMAIL     = P_EMAIL,
               TELEFONO  = P_TELEFONO,
               DIRECCION = P_DIRECCION
         WHERE ID_CLIENTE = P_ID_CLIENTE;
    END IF;
END;
/
////////////////////////////////////////////////////////////////////////////
/

------------------------------------------------------------------------
-- 2) ELIMINAR_CLIENTE
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE (
    P_ID_CLIENTE   IN CLIENTES.ID_CLIENTE%TYPE
)
IS
    V_EXISTENTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_EXISTENTE
      FROM CLIENTES
     WHERE ID_CLIENTE = P_ID_CLIENTE;
    IF V_EXISTENTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20011, 'CLIENTE CON ESE ID NO EXISTE.');
    END IF;

    DELETE FROM CLIENTES
     WHERE ID_CLIENTE = P_ID_CLIENTE;
END;
/
/////////////////////////////////////////////////////////////////////

------------------------------------------------------------------------
-- 3) CREAR_O_ACTUALIZAR_PRODUCTO
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CREAR_O_ACTUALIZAR_PRODUCTO (
    P_ID_PRODUCTO     IN PRODUCTOS.ID_PRODUCTO%TYPE,
    P_NOMBRE_PRODUCTO IN PRODUCTOS.NOMBRE_PRODUCTO%TYPE,
    P_DESCRIPCION     IN PRODUCTOS.DESCRIPCION%TYPE,
    P_PRECIO          IN PRODUCTOS.PRECIO%TYPE,
    P_STOCK           IN PRODUCTOS.STOCK%TYPE
)
IS
    V_EXISTENTE NUMBER;
BEGIN
    -- VALIDACIONES
    IF P_NOMBRE_PRODUCTO IS NULL OR P_DESCRIPCION IS NULL THEN
        RAISE_APPLICATION_ERROR(-20021, 'NOMBRE Y DESCRIPCION SON OBLIGATORIOS.');
    ELSIF P_PRECIO < 0 THEN
        RAISE_APPLICATION_ERROR(-20022, 'PRECIO NO PUEDE SER NEGATIVO.');
    ELSIF P_STOCK < 0 THEN
        RAISE_APPLICATION_ERROR(-20023, 'STOCK NO PUEDE SER NEGATIVO.');
    END IF;

    IF P_ID_PRODUCTO IS NULL THEN
        -- INSERTAR
        INSERT INTO PRODUCTOS (NOMBRE_PRODUCTO, DESCRIPCION, PRECIO, STOCK)
        VALUES (P_NOMBRE_PRODUCTO, P_DESCRIPCION, P_PRECIO, P_STOCK);
    ELSE
        -- ACTUALIZAR
        SELECT COUNT(*) INTO V_EXISTENTE
          FROM PRODUCTOS
         WHERE ID_PRODUCTO = P_ID_PRODUCTO;
        IF V_EXISTENTE = 0 THEN
            RAISE_APPLICATION_ERROR(-20024, 'PRODUCTO CON ESE ID NO EXISTE.');
        END IF;

        UPDATE PRODUCTOS
           SET NOMBRE_PRODUCTO = P_NOMBRE_PRODUCTO,
               DESCRIPCION     = P_DESCRIPCION,
               PRECIO          = P_PRECIO,
               STOCK           = P_STOCK
         WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    END IF;
END;
/
///////////////////////////////////////

------------------------------------------------------------------------
-- 4) ELIMINAR_PRODUCTO
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO (
    P_ID_PRODUCTO   IN PRODUCTOS.ID_PRODUCTO%TYPE
)
IS
    V_EXISTENTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_EXISTENTE
      FROM PRODUCTOS
     WHERE ID_PRODUCTO = P_ID_PRODUCTO;
    IF V_EXISTENTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20031, 'PRODUCTO CON ESE ID NO EXISTE.');
    END IF;

    DELETE FROM PRODUCTOS
     WHERE ID_PRODUCTO = P_ID_PRODUCTO;
END;
/

////////////////////////////////////////////////////////////////////////

 PROCEDIMIENTO CREAR_O_ACTUALIZAR_PEDIDO (USANDO ID_ESTADO)
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CREAR_O_ACTUALIZAR_PEDIDO (
    P_ID_PEDIDO        IN PEDIDOS.ID_PEDIDO%TYPE,
    P_ID_CLIENTE       IN PEDIDOS.ID_CLIENTE%TYPE,
    P_LISTA_PRODUCTOS  IN PEDIDOS.LISTA_PRODUCTOS%TYPE,
    P_FECHA_CREACION   IN PEDIDOS.FECHA_CREACION%TYPE,
    P_ID_ESTADO        IN PEDIDOS.ID_ESTADO%TYPE
)
IS
    V_EXISTE_CLIENTE   NUMBER;
    V_EXISTE_ESTADO    NUMBER;
    V_EXISTE_PEDIDO    NUMBER;
    V_TOTAL            NUMBER;
BEGIN
    -- VALIDACIONES BÁSICAS
    IF P_ID_CLIENTE IS NULL
     OR P_LISTA_PRODUCTOS IS NULL
     OR P_FECHA_CREACION IS NULL
     OR P_ID_ESTADO IS NULL THEN
        RAISE_APPLICATION_ERROR(-20041, 'TODOS LOS CAMPOS OBLIGATORIOS DEBEN ESTAR CUBIERTOS.');
    ELSIF P_FECHA_CREACION >= SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20042, 'FECHA DE CREACION DEBE SER ANTERIOR A HOY.');
    END IF;

    -- VALIDAR CLIENTE EXISTE
    SELECT COUNT(*) INTO V_EXISTE_CLIENTE
      FROM CLIENTES
     WHERE ID_CLIENTE = P_ID_CLIENTE;
    IF V_EXISTE_CLIENTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20043, 'CLIENTE NO EXISTE.');
    END IF;

    -- VALIDAR ESTADO EXISTE
    SELECT COUNT(*) INTO V_EXISTE_ESTADO
      FROM ESTADO
     WHERE ID_ESTADO = P_ID_ESTADO;
    IF V_EXISTE_ESTADO = 0 THEN
        RAISE_APPLICATION_ERROR(-20044, 'ESTADO NO EXISTE.');
    END IF;

    -- CALCULAR TOTAL
    SELECT SUM(PRECIO)
      INTO V_TOTAL
      FROM PRODUCTOS
     WHERE ID_PRODUCTO IN (
       SELECT TO_NUMBER(REGEXP_SUBSTR(P_LISTA_PRODUCTOS,'[^,]+',1,LEVEL))
         FROM DUAL
       CONNECT BY LEVEL <= REGEXP_COUNT(P_LISTA_PRODUCTOS,',')+1
     );

    IF P_ID_PEDIDO IS NULL THEN
        -- INSERTAR
        INSERT INTO PEDIDOS (
            ID_CLIENTE, LISTA_PRODUCTOS, TOTAL, FECHA_CREACION, ID_ESTADO
        ) VALUES (
            P_ID_CLIENTE,
            P_LISTA_PRODUCTOS,
            NVL(V_TOTAL,0),
            P_FECHA_CREACION,
            P_ID_ESTADO
        );
    ELSE
        -- ACTUALIZAR
        SELECT COUNT(*) INTO V_EXISTE_PEDIDO
          FROM PEDIDOS
         WHERE ID_PEDIDO = P_ID_PEDIDO;
        IF V_EXISTE_PEDIDO = 0 THEN
            RAISE_APPLICATION_ERROR(-20045, 'PEDIDO CON ESE ID NO EXISTE.');
        END IF;

        UPDATE PEDIDOS
           SET ID_CLIENTE      = P_ID_CLIENTE,
               LISTA_PRODUCTOS = P_LISTA_PRODUCTOS,
               TOTAL           = NVL(V_TOTAL,0),
               FECHA_CREACION  = P_FECHA_CREACION,
               ID_ESTADO       = P_ID_ESTADO
         WHERE ID_PEDIDO = P_ID_PEDIDO;
    END IF;
END;
/
  

///////////////////////////////////

 4) PROCEDIMIENTO ELIMINAR_PEDIDO
------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PEDIDO (
    P_ID_PEDIDO   IN PEDIDOS.ID_PEDIDO%TYPE
)
IS
    V_EXISTENTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_EXISTENTE
      FROM PEDIDOS
     WHERE ID_PEDIDO = P_ID_PEDIDO;
    IF V_EXISTENTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20051, 'PEDIDO CON ESE ID NO EXISTE.');
    END IF;

    DELETE FROM PEDIDOS
     WHERE ID_PEDIDO = P_ID_PEDIDO;
END;

////////////////////////////////////////////////////////////////////////////

-- Crear nuevo cliente

CALL CREAR_O_ACTUALIZAR_CLIENTE(
  NULL, 'JUAN', 'PEREZ', 'juan.perez@correo.com', '5512345678', 'CALLE FALSA 123'
);

-- Eliminar cliente
CALL ELIMINAR_CLIENTE(10);



-- Crear nuevo producto
CALL CREAR_O_ACTUALIZAR_PRODUCTO(
  NULL, 'TECLADO MECÁNICO', 'Teclado retroiluminado', 1200.00, 50
);


-- Eliminar producto
CALL ELIMINAR_PRODUCTO(5);


-- 1) INSERTAR NUEVO PEDIDO
CALL CREAR_O_ACTUALIZAR_PEDIDO(
    NULL,                          -- P_ID_PEDIDO (NULL para insertar)
  	1,                             -- P_ID_CLIENTE
    '1,2,3',                       -- P_LISTA_PRODUCTOS (IDs separados por coma)
    TO_DATE('17/05/2025','DD/MM/YYYY'),  -- P_FECHA_CREACION
    1                              -- P_ID_ESTADO (p.ej. 1 = PENDIENTE)
);

-- 2) ACTUALIZAR PEDIDO EXISTENTE
CALL CREAR_O_ACTUALIZAR_PEDIDO(
    5,                             -- P_ID_PEDIDO (ID del pedido a actualizar)
    1,                             -- P_ID_CLIENTE (puede cambiarse si es necesario)
    '2,4,7',                       -- P_LISTA_PRODUCTOS actualizada
    TO_DATE('16/05/2025','DD/MM/YYYY'),  -- P_FECHA_CREACION (debe ser ≤ SYSDATE)
    2                              -- P_ID_ESTADO (p.ej. 2 = ENVIADO)
);

-- 3) ELIMINAR PEDIDO
CALL ELIMINAR_PEDIDO(
    5                              -- P_ID_PEDIDO (ID del pedido a eliminar)
);



